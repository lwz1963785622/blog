(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{412:function(t,a,s){"use strict";s.r(a);var n=s(17),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"变量与数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量与数据类型"}},[t._v("#")]),t._v(" 变量与数据类型")]),t._v(" "),s("blockquote",[s("p",[t._v("请使用 var 运算符声明变量。")])]),t._v(" "),s("h2",{attrs:{id:"标识符命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符命名规范"}},[t._v("#")]),t._v(" 标识符命名规范")]),t._v(" "),s("h3",{attrs:{id:"命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名规范"}},[t._v("#")]),t._v(" 命名规范")]),t._v(" "),s("ol",[s("li",[t._v("严格区分大小写；")])]),t._v(" "),s("ul",[s("li",[t._v("命名必须以字母或"),s("code",[t._v("_")]),t._v("或"),s("code",[t._v("$")]),t._v("开头，余下的部分可以是任意的字母，数字，或者是"),s("code",[t._v("_")]),t._v("或者是"),s("code",[t._v("$")]),t._v("；")]),t._v(" "),s("li",[t._v("不能用关键字或者是保留字命名；")]),t._v(" "),s("li",[t._v("javascript 自己的命名习惯；\n"),s("ul",[s("li",[t._v("驼峰命名法：getElementById")]),t._v(" "),s("li",[t._v("首字母大写：Object")])])]),t._v(" "),s("li",[t._v("命名要有意义。")])]),t._v(" "),s("h3",{attrs:{id:"关键字与保留字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字与保留字"}},[t._v("#")]),t._v(" 关键字与保留字")]),t._v(" "),s("ul",[s("li",[t._v("ECMA-262 定义了 ECMAScript 支持的一套关键字（keyword）、保留字（reserved word）。")]),t._v(" "),s("li",[t._v("关键字标识了 ECMAScript 语句的开头和/或结尾。根据规定，关键字是保留的，不能用作变量名或函数名。")]),t._v(" "),s("li",[t._v("保留字在某种意思上是为将来的关键字而保留的单词。因此保留字不能被用作变量名或函数名。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("关键字保留字")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}}),t._v(" "),s("th",{staticStyle:{"text-align":"center"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("abstract")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("arguments")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("break")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("byte")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("case")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("catch")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("char")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("class")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("const")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("continue")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("debugger")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("default")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("delete")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("do")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("else")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("enum")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("eval")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("export")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("extends")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("final")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("finally")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("for")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("function")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("goto")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("if")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("implements")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("import")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("in")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("instanceof")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("interface")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("let")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("native")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("new")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("package")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("private")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("protected")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("public")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("return")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("short")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("static")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("super")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("switch")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("synchronized")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("this")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("throws")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("transient")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("try")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("typeof")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("var")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("void")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("volatile")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("while")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("with")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("yield")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var for = 123;\n//Uncaught SyntaxError: Unexpected token for\n")])])]),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("h3",{attrs:{id:"变量是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量是什么"}},[t._v("#")]),t._v(" 变量是什么?")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("变量，就是一个用于存放数值的容器。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var name = "张三";\nalert("hello "+name); // hello 张三\n\nvar num = 100;\nalert(num*10);        // 1000\n')])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("变量是用来存储数值的。变量不是数值本身，它们仅仅是一个用于存储数值的容器。\n你可以把变量想象成一个个用来装东西的纸箱子。")])]),t._v(" "),s("img",{staticClass:"my-img",attrs:{src:"/img/javascript/boxes.png",width:"50%",alt:"存储数据"}}),t._v(" "),s("ul",[s("li",[t._v("变量的独特之处在于它存放的数值是可以改变的。")]),t._v(" "),s("li",[t._v("变量它们能够存储任何的东西 -- 不只是字符串和数字。变量可以存储更复杂的数据，甚至是函数。")])]),t._v(" "),s("h3",{attrs:{id:"声明变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明变量"}},[t._v("#")]),t._v(" 声明变量")]),t._v(" "),s("p",[t._v("JavaScript 有三种声明方式。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("关键词")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("版本")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("var")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("声明一个变量，可赋一个初始化值。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ES5")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("let")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("声明一个块作用域的局部变量，可赋一个初始化值。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ES6")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("const")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("声明一个块作用域的只读的命名常量。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ES6")])])])]),t._v(" "),s("h4",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),s("p",[t._v("声明一个变量的语法是在 var 关键字之后加上这个变量的名字：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var myName;\nvar myAge;\n")])])]),s("p",[t._v("变量声明后，即可使用，以下通过输出变量方式来使用：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("console.log(myName);   //undefined\nconsole.log(myAge);    //undefined\n")])])]),s("p",[t._v("以上这两个变量并没有赋值，他们是空的容器(在 Javascript 中用 undefined 表示，未定义)。")]),t._v(" "),s("p",[t._v("同时声明多个变量,通过"),s("code",[t._v(",")]),t._v("隔开：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var myName,myAge,mySex;\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("提示: 千万不要把两个概念弄混淆了，“一个变量存在，但是没有赋值”和“一个变量并不存在” — 他们完全是两回事.")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//声明未赋值\nvar myName;\nconsole.log(myName);     //输出undefined\n\n//未声明\nconsole.log(firstName);  //报错 firstName is not defined\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("用 var 或 let 语句声明的变量，如果没有赋初始值，则其值为 undefined。")])]),t._v(" "),s("h4",{attrs:{id:"初始化变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化变量"}},[t._v("#")]),t._v(" 初始化变量")]),t._v(" "),s("p",[t._v("初始化变量有两种方式：")]),t._v(" "),s("ol",[s("li",[t._v("先声明再初始化")]),t._v(" "),s("li",[t._v("声明变量并初始化")])]),t._v(" "),s("p",[t._v("先声明再初始化，方法如下，在变量名之后跟上一个“=”，然后是值:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var myName;\nvar myAge;\n\nmyName="Nico";\nmyAge = 19;\n\nconsole.log(myName);  //输出 Nico\nconsole.log(myAge);   //输出 19\n')])])]),s("p",[t._v("【重点】声明变量并初始化:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('var myName = "Nico";\nvar myAge = 19;\n\nconsole.log(myName);  //输出 Nico\nconsole.log(myAge);   //输出 19\n')])])]),s("h4",{attrs:{id:"更新变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新变量"}},[t._v("#")]),t._v(" 更新变量")]),t._v(" "),s("p",[t._v("一旦变量赋值，您可以通过简单地给它一个不同的值来更新它。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var myName = 'Nico';\nconsole.log(myName); //输出 Nico\n\nmyName = \"Allcky\";\nconsole.log(myName); //输出 Allcky\n")])])]),s("h3",{attrs:{id:"es6-常量-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-常量-constants"}},[t._v("#")]),t._v(" [es6]常量(Constants)")]),t._v(" "),s("p",[t._v("你可以用关键字 const 创建一个只读的常量。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const PI = 3.141592654 ;\nconsole.log(PI); //输出 3.141592654\n")])])]),s("ul",[s("li",[t._v("常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明。它必须被初始化为某个值。")]),t._v(" "),s("li",[t._v("常量的作用域规则与 let 块级作用域变量相同。若省略 const 关键字，则该标识符将被视为变量。")]),t._v(" "),s("li",[t._v("在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。")])]),t._v(" "),s("p",[t._v("不能使用与变量名或函数名相同的名字来命名常量，例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function f() {};\nconst f = 5;\n//Uncaught SyntaxError: Identifier 'f' has already been declared\n//语法错误： 标识符 'f' 已经被声明\n")])])]),s("blockquote",[s("p",[t._v("常量标识符的命名规则和变量相同：必须以字母、下划线或美元符号开头并可以包含有字母、数字或下划线。")])]),t._v(" "),s("p",[t._v("常量对象的属性是不受保护的,所以可以修改常量对象的属性，例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const MY_OBJECT = {"key": "value"};\nMY_OBJECT.key = "otherValue";\n')])])]),s("blockquote",[s("p",[t._v("利用 ES6 中对象的方法 "),s("code",[t._v("Object.freeze()")]),t._v("可将对象冻结，从而无法修改其属性 (详见"),s("code",[t._v("Object对象")]),t._v("一节)")])]),t._v(" "),s("h3",{attrs:{id:"变量声明兼容性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明兼容性"}},[t._v("#")]),t._v(" 变量声明兼容性")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("let")]),t._v(" 与 "),s("code",[t._v("const")]),t._v("是 ES6 新增声明方式，其存在兼容问题：")])]),t._v(" "),s("h3",{attrs:{id:"let-const-var-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-const-var-区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("let")]),t._v(" "),s("code",[t._v("const")]),t._v(" "),s("code",[t._v("var")]),t._v(" 区别")]),t._v(" "),s("h4",{attrs:{id:"var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" "),s("code",[t._v("var")])]),t._v(" "),s("ol",[s("li",[t._v("var 声明作用域\n关键的问题在于，使用 var 操作符定义的变量会成为包含它的函数的局部变量。比如，使用 var\n在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 局部变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出错！")]),t._v("\n")])])]),s("p",[t._v("这里，message 变量是在函数内部使用 var 定义的。函数叫 test()，调用它会创建这个变量并给\n它赋值。调用之后变量随即被销毁，因此示例中的最后一行会导致错误。不过，在函数内定义变量时省\n略 var 操作符，可以创建一个全局变量：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "hi"')]),t._v("\n")])])]),s("p",[t._v("去掉之前的 var 操作符之后，message 就变成了全局变量。只要调用一次函数 test()，就会定义\n这个变量，并且可以在函数外部访问到。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("var 声明提升\n使用 var 时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域\n顶部：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined ")]),t._v("\n")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 36")]),t._v("\n")])])]),s("h4",{attrs:{id:"let"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" "),s("code",[t._v("let")])]),t._v(" "),s("blockquote",[s("p",[t._v("let 跟 var 的作用差不多，但有着非常重要的区别。"),s("code",[t._v("最明显的区别是，let 声明的范围是块作用域， 而 var 声明的范围是函数作用域。")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Matt ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Matt ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 26 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: age 没有定义")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重复声明")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError；标识符 age 已经声明过了")]),t._v("\n")])])]),s("p",[t._v("JavaScript 引擎会记录用于变量声明的标识符及其所在的块作用域，因此嵌套使用相同的标\n识符不会报错，而这是因为同一个块中没有重复声明：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nicholas'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Nicholas' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Matt' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 26 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("对声明冗余报错不会因混用 let 和 var 而受影响。这两个关键字声明的并不是不同类型的变量，\n它们只是指出变量在相关作用域如何存在。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError")]),t._v("\n")])])]),s("p",[t._v("暂时性死区\n"),s("code",[t._v("let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name 会被提升")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// age 不会被提升")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError：age 没有定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[s("code",[t._v("在解析代码时，JavaScript 引擎也会注意出现在块后面的 let 声明，只不过在此之前不能以任何方 式来引用未声明的变量。在 let 声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此 阶段引用任何后面才声明的变量都会抛出 ReferenceError。")])]),t._v(" "),s("p",[t._v("全局声明\n"),s("code",[t._v("与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声 明的变量则会）。")])]),t._v(" "),s("p",[t._v("条件声明\n在使用 var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合\n并为一个声明。因为 let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同\n时也就不可能在没有声明的情况下声明它。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nicholas'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设脚本不确定页面中是否已经声明了同名变量")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那它可以假设还没有声明过")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里没问题，因为可以被作为一个提升声明来处理")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不需要检查之前是否声明过同名变量")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 age 之前声明过，这里会报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 try/catch 语句或 typeof 操作符也不能解决，因为条件块中 let 声明的作用域仅限于该块。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Nicholas'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设脚本不确定页面中是否已经声明了同名变量")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那它可以假设还没有声明过")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// name 被限制在 if {} 块的作用域内")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因此这个赋值形同全局赋值")]),t._v("\n name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 age 没有声明过，则会报错")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// age 被限制在 catch {}块的作用域内")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因此这个赋值形同全局赋值")]),t._v("\n age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Matt' ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("p",[s("code",[t._v("const")])]),t._v(" "),s("p",[t._v("const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为 foo 添加一个属性，可以成功")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 foo 指向另一个对象，就会报错")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// TypeError: "foo" is read-only')]),t._v("\n\n")])])]),s("p",[s("code",[t._v("ES6 声明变量的六种方法")])]),t._v(" "),s("p",[t._v("ES5 只有两种声明变量的方法：var命令和function命令。ES6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法")]),t._v(" "),s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("p",[t._v("计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。")]),t._v(" "),s("p",[t._v("在 JavaScript 中定义了以下几种数据类型：")]),t._v(" "),s("ul",[s("li",[t._v("ECMAScript 有 6 种初始类型（primitive type），即 "),s("code",[t._v("Undefined")]),t._v("、"),s("code",[t._v("Null")]),t._v("、"),s("code",[t._v("Boolean")]),t._v("、"),s("code",[t._v("Number")]),t._v("、"),s("code",[t._v("String")]),t._v("和 ES6 新增的"),s("code",[t._v("Symbol")]),t._v(" 以及 ES2020新增的"),s("code",[t._v("数据类型")]),t._v("。")]),t._v(" "),s("li",[t._v("ECMAScript 有 1 种引用类型，即"),s("code",[t._v("Object")])])]),t._v(" "),s("table",[s("tr",[s("th",[t._v("分类")]),t._v(" "),s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("值")])]),t._v(" "),s("tr",[s("td",{attrs:{rowspan:"7"}},[t._v("初始类型")]),t._v(" "),s("td",[t._v("undefined")]),t._v(" "),s("td",[t._v("undefined")])]),t._v(" "),s("tr",[s("td",[t._v("null")]),t._v(" "),s("td",[t._v("一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，因此 null 与 Null、NULL或其他变量完全不同。")])]),t._v(" "),s("tr",[s("td",[t._v("string")]),t._v(" "),s("td",[t._v("单双引号引起来的数据")])]),t._v(" "),s("tr",[s("td",[t._v("number")]),t._v(" "),s("td",[t._v("包括整型和浮点型。科学计数法。支持二进制、八进制、十进制、十六进制。")])]),t._v(" "),s("tr",[s("td",[t._v("BigInt（大整数）")]),t._v(" "),s("td",[t._v("ES2020 引入了一种新的数据类型 BigInt（大整数），这是 ECMAScript 的第八种数据类型。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。")])]),t._v(" "),s("tr",[s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("true false")])]),t._v(" "),s("tr",[s("td",[t._v("Symbol")]),t._v(" "),s("td",[t._v("表示独一个一无二的值。(ES6新增)")])]),t._v(" "),s("tr",[s("td",[t._v("引用类型")]),t._v(" "),s("td",[t._v("Object")]),t._v(" "),s("td",[t._v("包含相关属性和方法的一个集合。包含Function、Array、Object")])])]),t._v(" "),s("h3",{attrs:{id:"undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[t._v("#")]),t._v(" undefined")]),t._v(" "),s("p",[t._v("undefined 未定义，指的就是变量创建后但是没有赋值，而变量的默认值就是"),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("p",[t._v("如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("h3",{attrs:{id:"null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" null")]),t._v(" "),s("p",[t._v("null 一个表明 null 值的特殊关键字，相当于一个占位符。JavaScript 是大小写敏感的，因此 null 与 Null、NULL 或其他变量完全不同。")]),t._v(" "),s("p",[t._v('Null 类型同样只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给\ntypeof 传一个 null 会返回"object"的原因：')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" car "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" car"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n")])])]),s("p",[t._v("在定义将来要保存对象值的变量时，建议使用 null 来初始化，不要使用其他值。这样，只要检查\n这个变量的值是不是 null 就可以知道这个变量是否在后来被重新赋予了一个对象的引用，比如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("car "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// car 是一个对象的引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例\n子所示：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true ")]),t._v("\n")])])]),s("p",[t._v("用等于操作符（==）比较 null 和 undefined 始终返回 true。但要注意，这个操作符会为了比较\n而转换它的操作数\n即使 null 和 undefined 有关系，它们的用途也是完全不一样的。如前所述，永远不必显式地将\n变量值设置为 undefined。但 null 不是这样的。任何时候，只要变量要保存对象，而当时又没有那个\n对象可保存，就要用 null 来填充该变量。这样就可以保持 null 是空对象指针的语义，并进一步将其\n与 undefined 区分开来。\nnull 是一个假值。因此，如果需要，可以用更简洁的方式检测它。不过要记住，也有很多其他可\n能的值同样是假值。所以一定要明确自己想检测的就是 null 这个字面值，而不仅仅是假值。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个块不会执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个块会执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个块不会执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个块会执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"string-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[t._v("#")]),t._v(" string 类型")]),t._v(" "),s("p",[t._v("用单双引号来说明，他所包围的值都可以是字符串。")]),t._v(" "),s("blockquote",[s("p",[t._v("引号包裹的字符串中间不允许换行")])]),t._v(" "),s("p",[t._v("单双引号的用法：")]),t._v(" "),s("ul",[s("li",[t._v("效率是一样的")]),t._v(" "),s("li",[t._v("只能成对出现，不能相互交叉使用")]),t._v(" "),s("li",[t._v("可以相互嵌套。")])]),t._v(" "),s("p",[t._v("还包括一些特殊的字符:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Null 字节")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("退格符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\f")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("换页符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\n")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("换行符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\r")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("回车符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\t")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Tab (制表符)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\v")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("垂直制表符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("'")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("单引号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v('"')]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("双引号")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("反斜杠字符（\\）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\XXX")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("由从 0 到 377 最多三位八进制数 XXX 表示的 Latin-1 字符。例如，\\251 是版权符号的八进制序列。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\xXX")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("由从 00 和 FF 的两位十六进制数字 XX 表示的 Latin-1 字符。例如，\\ xA9 是版权符号的十六进制序列。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\uXXXX")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("由四位十六进制数字 XXXX 表示的 Unicode 字符。例如，\\ u00A9 是版权符号的 Unicode 序列。见 Unicode escape sequences (Unicode 转义字符).")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\u{XXXXX}")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Unicode 代码点 (code point) 转义字符。例如，\\u{2F804} 相当于 Unicode 转义字符 \\uD87E\\uDC04 的简写。")])])])]),t._v(" "),s("h3",{attrs:{id:"number-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" number 类型")]),t._v(" "),s("p",[t._v("number 类型包括整型和浮点型。支持十进制（基数为 10）、十六进制（基数为 16）、八进制（基数为 8）以及二进制（基数为 2）表示。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("进制")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("表示")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("十进制")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("十进制整数字面量由一串数字序列组成，且没有前缀 0。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("八进制")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("八进制的整数以 0（或 0O、0o）开头，只能包括数字 0-7。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("十六进制")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("十六进制整数以 0x（或 0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("二进制")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("二进制整数以 0b（或 0B）开头，只能包含数字 0 和 1。")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var n1 = 100; //十进制\n\nvar n2 = 071;  //八进制\nvar n3 = 0o71; //八进制 ES6规定 0o开头\n\nvar n4 = 0xa9; //十六进制\n\nvar n5 = 0b11; //二进制\n")])])]),s("blockquote",[s("p",[t._v("严格模式下，八进制整数字面量必须以 0o 或 0O 开头，而不能以 0 开头。")])]),t._v(" "),s("p",[t._v("对于非常大或非常小的数，可以用科学计数法表示，可以把一个数表示为数字（包括十进制数字）加 e（或 E），后面加乘以 10 的倍数。例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 用科学计数法来表示，还包括一些特殊的值：\n# 最大值\nNumber.MAX_VALUE    //1.7976931348623157e+308\n\n# 最小值\nNumber.MIN_VALUE    //5e-324\n\nvar n1 = 3e2; //3*100 = 300\nvar n2 = 5e3; //5*1000 = 5000\nvar n3 = 5.3e3; //5.3*1000 = 5300\n\n# 无穷大\nInfinity    // 1/0 = Infinity\n")])])]),s("h3",{attrs:{id:"bigint-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bigint-类型"}},[t._v("#")]),t._v(" BigInt 类型 "),s("Badge",{attrs:{text:"ES2020",type:"warning"}})],1),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinity。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 超过 53 个二进制位的数值，无法保持精度")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 超过 2 的 1024 次方的数值，无法表示")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("ES2020 引入了一种新的数据类型 BigInt（大整数），来解决这个问题，这是 ECMAScript 的第八种数据类型。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2172141653n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15346349309n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BigInt 可以保持精度")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 33334444555566667777n")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通整数无法保持精度")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 33334444555566670000")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("为了与 Number 类型区别，BigInt 类型的数据必须添加后缀n。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通整数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BigInt")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BigInt 的运算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3n")]),t._v("\n")])])]),s("p",[t._v("BigInt 同样可以使用各种进制表示，都要加上后缀"),s("code",[t._v("n")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1101n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二进制")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o777n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 八进制")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十六进制")]),t._v("\n")])])]),s("p",[t._v("BigInt 与普通整数是两种值，它们之间并不相等。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("p",[s("code",[t._v("typeof")]),t._v("运算符对于 BigInt 类型的数据返回"),s("code",[t._v("bigint")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'bigint'")]),t._v("\n")])])]),s("p",[t._v("BigInt 可以使用负号（"),s("code",[t._v("-")]),t._v("），但是不能使用正号（"),s("code",[t._v("+")]),t._v("），因为会与 asm.js 冲突。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("JavaScript 以前不能计算70的阶乘（即"),s("code",[t._v("70!")]),t._v("），因为超出了可以表示的精度。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.197857166996989e+100")]),t._v("\n")])])]),s("p",[t._v("现在支持大整数了，就可以算了，浏览器的开发者工具运行下面代码，就OK。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11978571...00000000n")]),t._v("\n")])])]),s("h3",{attrs:{id:"boolean-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[t._v("#")]),t._v(" boolean 类型")]),t._v(" "),s("p",[t._v('Boolean. 布尔值，true 和 false. 表示"真"和"假"')]),t._v(" "),s("h3",{attrs:{id:"symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol  "),s("Badge",{attrs:{text:"es6",type:"warning"}})],1),t._v(" "),s("p",[t._v("Symbol ( 在 ECMAScript 6 中新添加的类型).。一种数据类型，它的实例是唯一且不可改变的。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。")]),t._v(" "),s("h3",{attrs:{id:"object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),s("p",[t._v("引用类型: 引用类型是一种数据结构，用于将数据和功能组织在一起，存储大量的数据")]),t._v(" "),s("blockquote",[s("p",[t._v("三大引用类型: Object 、Array 、Function")])]),t._v(" "),s("h2",{attrs:{id:"判断数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型"}},[t._v("#")]),t._v(" 判断数据类型")]),t._v(" "),s("p",[t._v("当我们想知道一个变量中存储的数据类型是什么，我们可以通过 typeof 运算符。")]),t._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("p",[s("code",[t._v("typeof")]),t._v("运算符后跟操作数：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" operand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" operand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),s("p",[t._v("下表总结了"),s("code",[t._v("typeof")]),t._v("可能的返回值")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("结果")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Undefined")]),t._v(" "),s("td",[t._v('"undefined"')])]),t._v(" "),s("tr",[s("td",[t._v("Null")]),t._v(" "),s("td",[t._v('"object"')])]),t._v(" "),s("tr",[s("td",[t._v("Boolean")]),t._v(" "),s("td",[t._v('"boolean"')])]),t._v(" "),s("tr",[s("td",[t._v("Number")]),t._v(" "),s("td",[t._v('"number"')])]),t._v(" "),s("tr",[s("td",[t._v("String")]),t._v(" "),s("td",[t._v('"string"')])]),t._v(" "),s("tr",[s("td",[t._v("Symbol")]),t._v(" "),s("td",[t._v('"symbol"')])]),t._v(" "),s("tr",[s("td",[t._v("BigInt")]),t._v(" "),s("td",[t._v('"bigint"')])]),t._v(" "),s("tr",[s("td",[t._v("函数对象")]),t._v(" "),s("td",[t._v('"function"')])]),t._v(" "),s("tr",[s("td",[t._v("任何其他对象")]),t._v(" "),s("td",[t._v('"object"')])])])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("注意 严格来讲，函数在 ECMAScript 中被认为是对象，并不代表一种数据类型。可是，\n函数也有自己特殊的属性。为此，就有必要通过 typeof 操作符来区分函数和其他对象。")])]),t._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof总是返回一个字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bla"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"变量在内存划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量在内存划分"}},[t._v("#")]),t._v(" 变量在内存划分")]),t._v(" "),s("blockquote",[s("p",[t._v("变量类型分两种是由于其在内存中存储方式不同：基本类型的数据是存放在"),s("code",[t._v("栈")]),t._v("内存中的，而引用类型的数据是存放在"),s("code",[t._v("堆")]),t._v("内存中的")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/javascript/02-1542881380000.png",alt:"基本类型与引用类型的存储方式"}})]),t._v(" "),s("h3",{attrs:{id:"堆栈的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈的概念"}},[t._v("#")]),t._v(" 堆栈的概念")]),t._v(" "),s("p",[t._v("两者都是存放临时数据的地方。")]),t._v(" "),s("h4",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("p",[t._v("栈（数据结构）：一种先进后出的数据结构。")]),t._v(" "),s("p",[t._v("栈区（stack） 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/javascript/stack.png",alt:"栈"}})]),t._v(" "),s("p",[t._v("这种乒乓球的存放方式与栈中存取数据的方式如出一辙。处于盒子中最顶层的乒乓球 5，它一定是最后被放进去，但可以最先被使用。而我们想要使用底层的乒乓球 1，就必须将上面的 4 个乒乓球取出来，让乒乓球 1 处于盒子顶层。这就是栈空间先进后出，后进先出的特点。图中已经详细的表明了栈空间的存储原理。")]),t._v(" "),s("h4",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),s("p",[t._v("堆（数据结构）：堆可以被看成是一棵树，如：堆排序；")]),t._v(" "),s("p",[t._v("堆区（heap） 一般由程序员分配释放，若程序员不释放，程序结束时可能由 OS 回收。")]),t._v(" "),s("p",[t._v("堆数据结构是一种树状结构。它的存取数据的方式，则与书架与书非常相似。")]),t._v(" "),s("p",[t._v("书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 key-value 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字")]),t._v(" "),s("p",[t._v("堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。对于堆，我们可以随心所欲的进行增加变量和删除变量，不用遵循次序。")]),t._v(" "),s("h3",{attrs:{id:"两种数据类型的存放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两种数据类型的存放"}},[t._v("#")]),t._v(" 两种数据类型的存放")]),t._v(" "),s("h4",{attrs:{id:"栈区存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈区存储"}},[t._v("#")]),t._v(" 栈区存储")]),t._v(" "),s("p",[t._v("JavaScript 的基础数据类型往往都会保存在变量对象中,即保存在栈内存中，因为这些类型在内存中分别占有固定大小的空间，通过按值来访问。\n基本类型由于数据简单，会存放到内存栈区，栈区包括了 变量的标识符和变量的值："),s("br"),t._v(" "),s("img",{attrs:{src:"/img/javascript/02-1542881486000.png",alt:"栈区示意图"}})]),t._v(" "),s("blockquote",[s("p",[t._v("栈区： 长度固定，读取速度快")])]),t._v(" "),s("h4",{attrs:{id:"堆区存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆区存储"}},[t._v("#")]),t._v(" 堆区存储")]),t._v(" "),s("p",[t._v("JS 的引用数据类型，比如数组 Array，Object,它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象。JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以理解为保存在变量对象中的一个地址，该地址与堆内存的实际值相关联。")]),t._v(" "),s("p",[t._v("我们可以结合以下例子与图解进行理解:")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/javascript/20181226000949936071.png",alt:"堆区示意图"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/javascript/02-1542881596000.png",alt:"堆区示意图"}})]),t._v(" "),s("blockquote",[s("p",[t._v("堆区： 长度不固定，读取速度慢")])]),t._v(" "),s("h3",{attrs:{id:"变量复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量复制"}},[t._v("#")]),t._v(" 变量复制")]),t._v(" "),s("h4",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("p",[t._v("基本数据类型：基本数据类型值指保存在栈内存中的简单数据段。访问方式是按值访问。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var a = 1;\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/stack1.png",alt:"栈区示意图1"}})]),t._v(" "),s("p",[t._v("操作的是变量实际保存的值。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a = 2;\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/stack2.png",alt:"栈区示意图2"}})]),t._v(" "),s("p",[t._v("基本类型变量的复制：从一个变量向一个变量复制时，会在栈中创建一个新值，然后把值复制到为新变量分配的位置上。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var b = a;\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/stack3.png",alt:"栈区示意图3"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("b = 2;\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/stack4.png",alt:"栈区示意图4"}})]),t._v(" "),s("h4",{attrs:{id:"引用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),s("p",[t._v("引用数据类型：引用数据类型值指保存在堆内存中的对象。也就是，变量中保存的实际上的只是一个指针，这个指针指向内存中的另一个位置，该位置保存着对象。访问方式是按引用访问。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var a = new Object();\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/dui1.png",alt:"堆区示意图1"}})]),t._v(" "),s("p",[t._v("当操作时，需要先从栈中读取内存地址，然后再延指针找到保存在堆内存中的值再操作。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a.name = 'xz';\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/dui2.png",alt:"堆区示意图2"}})]),t._v(" "),s("p",[t._v("引用类型变量的复制：复制的是存储在栈中的指针，将指针复制到栈中未新变量分配的空间中，而这个指针副本和原指针指向存储在堆中的同一个对象；复制操作结束后，两个变量实际上将引用同一个对象。因此，在使用时，改变其中的一个变量的值，将影响另一个变量。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var b = a;\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/dui3.png",alt:"堆区示意图3"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("b.sex = 'boy';\n")])])]),s("p",[s("img",{attrs:{src:"/img/javascript/dui4.png",alt:"堆区示意图3"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("console.log(a.sex) //boy\nconsole.log(b.sex) //boy\n")])])]),s("ul",[s("li",[s("a",{attrs:{target:"_blank",rel:"noopener noreferrer",href:" https://segmentfault.com/a/1190000005863067"}},[t._v("参考 1")])]),t._v(" "),s("li",[s("a",{attrs:{target:"_blank",rel:"noopener noreferrer",href:"  https://www.oschina.net/translate/how-does-javascript-actually-work-part-1"}},[t._v("参考 2")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);