(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{490:function(t,a,e){"use strict";e.r(a);var r=e(17),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react简介"}},[t._v("#")]),t._v(" React简介")]),t._v(" "),e("blockquote",[e("p",[t._v("React是Facebook开发的一款用于构建用户界面的JavaScript库。")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("地址")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("React官网")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://reactjs.org/",target:"_blank"}},[t._v("https://reactjs.org/")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("React官网中文")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://zh-hans.reactjs.org/",target:"_blank"}},[t._v("https://zh-hans.reactjs.org/")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("React中文文档")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/getting-started.html",target:"_blank"}},[t._v("https://zh-hans.reactjs.org/docs/getting-started.html")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("React版本更新历史")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("a",{attrs:{href:"https://github.com/facebook/react/blob/master/CHANGELOG.md",target:"_blank"}},[t._v("https://github.com/facebook/react/blob/master/CHANGELOG.md")])])])])]),t._v(" "),e("h2",{attrs:{id:"react是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react是什么"}},[t._v("#")]),t._v(" React是什么")]),t._v(" "),e("p",[t._v("React是Facebook开发的一款用于构建用户界面的JavaScript库。所有的React应用的核心是 "),e("strong",[t._v("组件(Component)")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"由谁开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#由谁开发"}},[t._v("#")]),t._v(" 由谁开发")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("起初由Facebook 的软件工程师 Jordan Walke 创建。")])]),t._v(" "),e("li",[e("p",[t._v("于2011年部署于Facebook 的 newsfeed")])]),t._v(" "),e("li",[e("p",[t._v("随后在2012年部署于Instargram")])]),t._v(" "),e("li",[e("p",[t._v("2013年5月开源。\n...")])])]),t._v(" "),e("h3",{attrs:{id:"组件化思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化思想"}},[t._v("#")]),t._v(" 组件化思想")]),t._v(" "),e("p",[t._v("React 的一个重要贡献——将基于组件的架构带到前端世界，React 并不是“组件”的发明者，但它的确在这领域深凿了一步。")]),t._v(" "),e("h3",{attrs:{id:"以-javascript-为中心"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以-javascript-为中心"}},[t._v("#")]),t._v(" 以 JavaScript 为中心")]),t._v(" "),e("p",[t._v('React 将 "HTML" 嵌入 JS。用Javascript语法去操作"HTML"。')]),t._v(" "),e("h2",{attrs:{id:"为什么需要react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要react"}},[t._v("#")]),t._v(" 为什么需要React")]),t._v(" "),e("p",[t._v("Facebook认为MVC无法满足他们的扩展需求，由于他们非常巨大的代码库和庞大的组织，使得MVC很快变得非常复复杂，每当需要添加一项新的功能或特性时，系统的复杂度就成级数增长，致使代码变得脆弱和不可预测，结果导致他们的MVC正在土崩瓦解。便认为MVC不适合大规模应用，当系统中有很多的模型和相应的视图时，其复杂度就会迅速扩大，非常难以理解和调试，特别是模型和视图间可能存在的双向数据流动。")]),t._v(" "),e("p",[t._v("解决这个问题需要“以某种方式组织代码，使其更加可预测”，Flux和React做到了这一点。Flux是一种促进应用内数据单向流动的系统架构。据Occhino介绍，React是一种用来构建“可控”和“声明式”的web用户接口的JavaScript框架，使得Facebook可以更快的开发web应用。")]),t._v(" "),e("p",[t._v("原生JavaScript 操作Dom频繁，效率低。（DOM-API操作UI）")]),t._v(" "),e("p",[t._v("使用JavaScript 直接操作DOM ，浏览器会大量的重绘重排。")]),t._v(" "),e("p",[t._v("原生JavaScript 没有组件化编码方案，代码复用低。")]),t._v(" "),e("h2",{attrs:{id:"react解决问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react解决问题"}},[t._v("#")]),t._v(" React解决问题")]),t._v(" "),e("p",[t._v("前端开发变得越来越复杂，其本质问题可归结于如何将来自于服务器端或者用户输入的动态数据高效的反映到复杂的用户界面上。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n                         现阶段问题          React解决方案\n                        ┌──────────┐      ┌──────────┐\n                        │          │      │          │\n                     ┌──┤频繁DOM操作├──────┤自动DOM操作│\n   ┌──────────┐      │  │          │      │          │\n   │          │      │  └──────────┘      └──────────┘\n   │DataChange├──────┤   \n   │          │      │  ┌──────────┐      ┌──────────┐\n   └──────────┘      │  │          │      │          │\n                     └──┤逻辑极复杂 ├──────┤ 状态&属性 │\n                        │          │      │          │\n                        └──────────┘      └──────────┘\n\n")])])]),e("p",[t._v("采用组件化模式，声明式编码，提高开发效率及组件复用率。")]),t._v(" "),e("p",[t._v("React Native 编写原生应用 移动端开发。")]),t._v(" "),e("p",[t._v("高效（优秀的Diffing算法 使用虚拟DOM）避免于真实Dom 接触。")]),t._v(" "),e("h2",{attrs:{id:"react设计哲学"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react设计哲学"}},[t._v("#")]),t._v(" React设计哲学")]),t._v(" "),e("p",[t._v("从设计哲学来讲，React 的整个设计思想其实非常简单：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("                  data  -> view\nconst Component = props => ReactElement\n")])])]),e("p",[t._v("再概括一下就是：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("data => view\n")])])]),e("blockquote",[e("p",[t._v("简而言之就是：数据到视图的映射。")])]),t._v(" "),e("h2",{attrs:{id:"react特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react特点"}},[t._v("#")]),t._v(" React特点")]),t._v(" "),e("ol",[e("li",[t._v("声明式设计"),e("a",{attrs:{href:"#[1]什么是声明式编程"}},[t._v("[1]")]),t._v("：自动DOM操作(React自动完成)")])]),t._v(" "),e("ul",[e("li",[t._v("高效：通过虚拟DOM(Virtual DOM)，最大限度的减少与DOM的交互提高效率")]),t._v(" "),e("li",[t._v("灵活：可以与已知的框架或库很好的配合")]),t._v(" "),e("li",[t._v("JSX：JavaScript语法的扩展，可以不使用，但建议使用")]),t._v(" "),e("li",[t._v("组件：构建组件，使代码更容易得到复用，能够很好地应用在大项目的开发中")]),t._v(" "),e("li",[t._v("单向数据流：React实现了单向响应的数据流，从而减少了重复代码，使得比传统数据绑定更简单")])]),t._v(" "),e("h2",{attrs:{id:"virtual-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),e("blockquote",[e("p",[t._v("React 使用 Virtual DOM 来更新真正的 DOM，从而提高效率和速度。")])]),t._v(" "),e("p",[t._v("在Web开发中，我们总需要将变化的数据实时展示到视图上，这时就需要对DOM进行操作，而复杂或频繁的DOM操作通常是性能瓶颈产生的原因（如何进行高性能的复杂DOM操作通常是衡量一个前端开发人员技能的重要指标）。")]),t._v(" "),e("p",[t._v("React为此引入了虚拟DOM（Virtual DOM）的机制：在浏览器端用Javascript实现了一套DOM API。因为 DOM 操作是真的很慢，所以我们永远不会直接用 React 修改 DOM，而是修改内存中的虚拟 DOM。")]),t._v(" "),e("img",{staticStyle:{"max-width":"600px"},attrs:{src:"/img/React/VirtualDOM.png"}}),t._v(" "),e("h3",{attrs:{id:"直接操作dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接操作dom"}},[t._v("#")]),t._v(" 直接操作DOM")]),t._v(" "),e("p",[t._v("真实页面对应一个 DOM 树。在传统页面的开发模式中，每次需要更新页面时，都要手动操作 DOM 来进行更新")]),t._v(" "),e("img",{staticStyle:{"max-width":"347px"},attrs:{src:"/img/React/dom-change.png"}}),t._v(" "),e("p",[t._v("DOM 操作非常昂贵。我们都知道在前端开发中，性能消耗最大的就是 DOM 操作，而且这 部分代码会让整体项目的代码变得难以维护。React 把真实 DOM 树转换成 JavaScript 对象树，也 就是 Virtual DOM")]),t._v(" "),e("h3",{attrs:{id:"virtual-dom-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom-2"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),e("img",{staticStyle:{"max-width":"631px"},attrs:{src:"/img/React/vdom-change.png"}}),t._v(" "),e("p",[t._v("操作虚拟 DOM 非常快，当时机合适时，React 负责更新真实 DOM。它通过比较虚拟 DOM 和真实 DOM 之间的差别，查明哪个改变很重要，然后在一个称为 Reconciliation 的过程中作出最少量的 DOM 改变，以确保一切保持最新。")]),t._v(" "),e("blockquote",[e("p",[t._v("简单说， 每次数据更新后，重新计算 Virtual DOM，并和上一次生成的 Virtual DOM 做对比，对发生 变化的部分做批量更新。")])]),t._v(" "),e("h2",{attrs:{id:"react组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react组件化"}},[t._v("#")]),t._v(" React组件化")]),t._v(" "),e("blockquote",[e("p",[t._v("创建好拥有各自状态的组件，再由组件构成更加复杂的界面。")])]),t._v(" "),e("p",[e("strong",[t._v("Component")]),t._v("，中文成为 "),e("strong",[t._v("组件")]),t._v(" 即将实现页面某一部分功能的结构、样式和逻辑封装成为一个整体，使其高内聚，低耦合，达到分治与复用的目的。组件化设计的目的是提高代码的复用，降低测试难度，代码复杂度。")]),t._v(" "),e("p",[e("strong",[t._v("组件")]),t._v(" 是React中构建用户界面的基本单位。组件化的工作方式信奉独立、完整、自由组合。目标就是尽可能把设计与开发中的元素独立化，使它具备完整的局部功能，通过自由组合来构成整个产品。")]),t._v(" "),e("p",[t._v("React 鼓励我们将视觉元素分为更小的组件，而不是一整大块：")]),t._v(" "),e("img",{attrs:{src:"/img/React/abstract/component.png",width:"70%"}}),t._v(" "),e("p",[t._v("React认为一个组件应该具有如下特征：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("可组合（Composeable）")]),t._v("：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部，一个复杂的UI可以拆分成多个简单的UI组件；")]),t._v(" "),e("li",[e("strong",[t._v("可重用（Reusable）")]),t._v("：每个组件都是具有独立功能的，它可以被使用在多个UI场景；")]),t._v(" "),e("li",[e("strong",[t._v("可维护（Maintainable）")]),t._v("：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护；")])]),t._v(" "),e("h2",{attrs:{id:"浏览器支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器支持"}},[t._v("#")]),t._v(" 浏览器支持")]),t._v(" "),e("p",[t._v("React 支持所有的现代浏览器，包括 IE9 及以上版本，但是需要为旧版浏览器比如 IE9 和 IE10 引入相关的 "),e("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/javascript-environment-requirements.html",target:"\\_blank"}},[t._v("polyfills 赖依")]),t._v("。")]),t._v(" "),e("p",[t._v("React 16 依赖集合类型 Map 和 Set 。如果你要支持无法原生提供这些能力（例如 IE < 11）或实现不规范（例如 IE 11）的旧浏览器与设备，考虑在你的应用库中包含一个全局的 polyfill ，例如 core-js 或 babel-polyfill 。")]),t._v(" "),e("h2",{attrs:{id:"附录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[t._v("#")]),t._v(" 附录")]),t._v(" "),e("h3",{attrs:{id:"_1-什么是声明式编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是声明式编程"}},[t._v("#")]),t._v(" [1]什么是声明式编程")]),t._v(" "),e("p",[t._v("声明式编程是一种编程范式，它关注的是你要做什么，而不是如何做。它表达逻辑而不显式地定义步骤。这意味着我们需要根据逻辑的计算来声明要显示的组件。它没有描述控制流步骤。声明式编程的例子有HTML、SQL等")]),t._v(" "),e("p",[t._v("HTML file")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// HTML\n<div>\n  <p>Declarative Programming</p>\n</div>\n")])])]),e("p",[t._v("SQL file")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("select * from studens where firstName = 'declarative';\n")])])]),e("h3",{attrs:{id:"声明式编程-vs-命令式编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明式编程-vs-命令式编程"}},[t._v("#")]),t._v(" 声明式编程 vs 命令式编程")]),t._v(" "),e("p",[t._v("声明式编程的编写方式描述了应该做什么，而命令式编程描述了如何做。在声明式编程中，让编译器决定如何做事情。声明性程序很容易推理，因为代码本身描述了它在做什么。")]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[t._v("https://juejin.im/post/5cf0733de51d4510803ce34e#heading-9")]),t._v(" "),e("li",[t._v("https://www.optbbs.com/thread-2050391-1-1.html")])])])}),[],!1,null,null,null);a.default=s.exports}}]);