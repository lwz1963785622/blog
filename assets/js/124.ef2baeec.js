(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{509:function(t,e,a){"use strict";a.r(e);var r=a(17),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"redux介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux介绍"}},[t._v("#")]),t._v(" Redux介绍")]),t._v(" "),a("blockquote",[a("p",[t._v("Redux 是 JavaScript 状态容器，提供可预测化的状态管理。")])]),t._v(" "),a("p",[t._v("Redux最主要是用作应用状态的管理。")]),t._v(" "),a("p",[a("strong",[t._v("官方网站")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("地址")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("官网")]),t._v(" "),a("td",[a("a",{attrs:{href:"http://redux.js.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://redux.js.org"),a("OutboundLink")],1)])]),t._v(" "),a("tr",[a("td",[t._v("中文官网")]),t._v(" "),a("td",[a("a",{attrs:{href:"http://cn.redux.js.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://cn.redux.js.org"),a("OutboundLink")],1)])])])]),t._v(" "),a("h2",{attrs:{id:"为什么需要redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要redux"}},[t._v("#")]),t._v(" 为什么需要Redux？")]),t._v(" "),a("blockquote",[a("p",[t._v("项目较小，人员较少，数据管理不复杂不需要Redux")])]),t._v(" "),a("h3",{attrs:{id:"为什么需要redux-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要redux-2"}},[t._v("#")]),t._v(" 为什么需要Redux？")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/React/why.png",alt:"why"}})]),t._v(" "),a("h3",{attrs:{id:"什么时候使用redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用redux"}},[t._v("#")]),t._v(" 什么时候使用Redux？")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/React/useRedux.png",alt:"useRedux"}})]),t._v(" "),a("p",[t._v("无论是移动端还是 pc 端，当你使用 React 或者 vue 开发组件化的 SPA 程序时，组件之间共享信息是一个非常大的问题。例如，用户登录之后客户端会存储用户信息（如userid、头像等），而系统的很多个组件都会用到这些信息，例如收藏、点赞、评论等。这些组件在用到用户信息时，难道每次使用都重新获取一遍？———— 自然不是这样。因此每个系统都需要一个管理多组件使用的公共信息的功能，这就是 Redux 的作用。")]),t._v(" "),a("p",[t._v("如果你的应用有以下场景，可以考虑使用 Redux:")]),t._v(" "),a("ol",[a("li",[t._v("不同身份的用户有不同的使用方式（比如普通用户和管理员）")])]),t._v(" "),a("ul",[a("li",[t._v("与服务器大量交互，或者使用了WebSocket")]),t._v(" "),a("li",[t._v("View要从多个来源获取数据")]),t._v(" "),a("li",[t._v("某个组件的状态，需要共享")]),t._v(" "),a("li",[t._v("某个状态需要在任何地方都可以拿到")]),t._v(" "),a("li",[t._v("一个组件需要改变全局状态")]),t._v(" "),a("li",[t._v("一个组件需要改变另一个组件的状态")])]),t._v(" "),a("h2",{attrs:{id:"redux-三大原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-三大原则"}},[t._v("#")]),t._v(" Redux 三大原则")]),t._v(" "),a("p",[t._v("想要理解Redux，必须要知道Redux设计和使用的三大原则。")]),t._v(" "),a("h3",{attrs:{id:"_1-单一数据源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-单一数据源"}},[t._v("#")]),t._v(" 1. 单一数据源")]),t._v(" "),a("p",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。")]),t._v(" "),a("h3",{attrs:{id:"_2-状态是只读的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-状态是只读的"}},[t._v("#")]),t._v(" 2. 状态是只读的")]),t._v(" "),a("p",[t._v("唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")]),t._v(" "),a("h3",{attrs:{id:"_3-状态的修改均由纯函数完成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-状态的修改均由纯函数完成"}},[t._v("#")]),t._v(" 3. 状态的修改均由纯函数完成")]),t._v(" "),a("p",[t._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。")]),t._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("p",[t._v("redux中有三个基本概念，"),a("strong",[t._v("Action")]),t._v("，"),a("strong",[t._v("Reducer")]),t._v("，"),a("strong",[t._v("Store")]),t._v("。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Action")]),t._v(" "),a("td",[t._v("是个对象，必须包含type这个属性，reducer将根据这个属性值来对store进行相应的处理。除此之外的属性，就是进行这个操作需要的数据。")])]),t._v(" "),a("tr",[a("td",[t._v("Reducer")]),t._v(" "),a("td",[t._v("是个函数。接受两个参数：要修改的数据 state 和 action 对象。根据 action.type 来决定采用的操作，对state进行修改，最后返回新的state。")])]),t._v(" "),a("tr",[a("td",[t._v("Store")]),t._v(" "),a("td",[t._v("是个对象，贯穿你整个应用的数据都应该存储在这里。")])])])]),t._v(" "),a("h3",{attrs:{id:"action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),a("blockquote",[a("p",[t._v("Action 的任务是描述“发生了什么事情？”")])]),t._v(" "),a("p",[t._v("Action 是一个普通对象。redux约定 Action 内使用一个字符串类型的 type 字段来表示将要执行的动作。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  type: 'ADD_ITEM'\n}\n")])])]),a("p",[t._v("除了 type 之外，Action可以存放一些其他的想要操作的数据。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  type: 'ADD_ITEM',\n  text: 'Hello King'\n}\n")])])]),a("p",[t._v("但在实际应用中，我们需要一个函数来为我们创建Action。这个函数叫做actionCreator。它看起来是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function addItem(text) {\n  return {\n    type: types.ADD_ITEM,\n    text\n  }\n}\n")])])]),a("h3",{attrs:{id:"reducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),a("blockquote",[a("p",[t._v("Reducer 是一个普通的回调函数。它的任务是根据传入的Action对象去修改状态树。")])]),t._v(" "),a("p",[t._v("当它被Redux调用的时候会为他传递两个参数State 和 Action。")]),t._v(" "),a("p",[t._v("Reducer会根据 Action 的type来对旧的 State 进行操作。返回新的State。")]),t._v(" "),a("p",[t._v("或者简单地讲 Reducer就是一个纯函数，根据传入的 当前state和action,返回一个新state：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(state,action) => newState\n")])])]),a("p",[t._v("比如我们这个例子中的Reducer应该是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const initialState = {\n\ttext:'hello world'\n}\n\nfunction Reducer(state=initialState,action){\n\tswitch(action.type){\n\t\tcase 'CHANGE_TEXT':\n\t\t\treturn {\n\t\t\t\ttext:'Hello Stark'\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n")])])]),a("h3",{attrs:{id:"store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" Store")]),t._v(" "),a("p",[t._v("Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。")]),t._v(" "),a("p",[t._v("Redux 提供createStore这个函数，用来生成 Store。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 创建Store非常简单。createStore 有两个参数，Reducer 和 initialState。\n\nimport {createStore} from 'redux';\nconst store = createStore(rootReducers, initialState);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const store = createStore(fn);\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("注意")]),t._v("：一个应用只有一个Store。")])]),t._v(" "),a("h2",{attrs:{id:"react-与-redux结合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-与-redux结合"}},[t._v("#")]),t._v(" React 与 Redux结合")]),t._v(" "),a("p",[t._v("Redux是一款状态管理库，并且提供了"),a("code",[t._v("react-redux")]),t._v("库来与React亲密配合，下图对其关系进行很好的展示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/React/reactvsredux.png",alt:"reactvsredux"}})]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("地址")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Redux 关系图解")]),t._v(" "),a("td",[t._v("https://segmentfault.com/a/1190000011473973")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);