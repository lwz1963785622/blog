(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{413:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("blockquote",[a("p",[t._v("运算符用于执行程序代码运算，会针对一个或以上操作数项目来进行运算。")])]),t._v(" "),a("p",[t._v("JavaScript中的运算符主要分为:")]),t._v(" "),a("ul",[a("li",[t._v("算术运算符")]),t._v(" "),a("li",[t._v("关系(比较)运算符")]),t._v(" "),a("li",[t._v("赋值运算符")]),t._v(" "),a("li",[t._v("逻辑运算符")]),t._v(" "),a("li",[t._v("一元运算符")]),t._v(" "),a("li",[t._v("三元运算符")]),t._v(" "),a("li",[t._v("特殊运算符")]),t._v(" "),a("li",[t._v("指数运算符")]),t._v(" "),a("li",[t._v("链判断运算符")]),t._v(" "),a("li",[t._v("Null 判断运算符")]),t._v(" "),a("li",[t._v("逻辑赋值运算符")])]),t._v(" "),a("h2",{attrs:{id:"算数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算数运算符"}},[t._v("#")]),t._v(" 算数运算符")]),t._v(" "),a("p",[t._v("JavaScript中的算术运算符中有加(+)、减(-)、乘(*)、除(/)、取余(%)、自增(++)、自减(--)、求幂(**)")]),t._v(" "),a("h3",{attrs:{id:"加法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加法"}},[t._v("#")]),t._v(" 加法(+)")]),t._v(" "),a("p",[t._v("JavaScript中的+主要用于两个方面，一个是加法运算，另一个是用来进行字符串拼接，加法运算规则如下：")]),t._v(" "),a("ol",[a("li",[t._v("数字与除字符串以外类型相加： 将其他类型转化为数字后算术相加，无法转化则结果为NaN\n"),a("ul",[a("li",[t._v("true 转化为1")]),t._v(" "),a("li",[t._v("false、null转化为0")]),t._v(" "),a("li",[t._v("undefined 无法转化")])])]),t._v(" "),a("li",[t._v("NaN与除字符串以外类型相加结果都为NaN")]),t._v(" "),a("li",[t._v("字符串与任意类型相加： 拼接"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'11'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'NaN1'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"1,2,31"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("在开发中，我们经常需要将变量的值输出到某个字符串中，这时需要将变量与字符串进行拼接，字符串拼接有两种方式：")]),t._v(" "),a("h5",{attrs:{id:"_1-拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-拼接"}},[t._v("#")]),t._v(" 1. + 拼接")]),t._v(" "),a("p",[t._v("变量必须放到字符串引号外部，变量与字符串之间用"),a("code",[t._v("+")]),t._v("连接：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"男"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"的年龄是:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，性别是:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("sex "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h5",{attrs:{id:"_2-es6模板字符串-ie不支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-es6模板字符串-ie不支持"}},[t._v("#")]),t._v(" 2. es6模板字符串 (ie不支持)")]),t._v(" "),a("blockquote",[a("p",[t._v("传统"),a("code",[t._v("+")]),t._v("拼接字符串相当繁琐不方便，ES6 引入了模板字符串解决这个问题")])]),t._v(" "),a("p",[t._v("模板字符串用 反单引号(`) 标识，可以当作普通字符串使用，或者在字符串中嵌入变量:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"男"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("的年龄是:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("，性别是:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("模板字符串特点：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1. 模板字符串中嵌入变量，需要将变量名写在`${}`之中，变量与字符串不需要 `+`连接\n2. `${}` 中可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性： `${num + 1}`\n3. 模板字符串中可以换行\n4. 模板字符串中可以随意使用单双引号\n")])])]),a("h3",{attrs:{id:"减法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减法"}},[t._v("#")]),t._v(" 减法(-)")]),t._v(" "),a("ol",[a("li",[t._v("数字和字符串相减 :\n"),a("ul",[a("li",[t._v("字符串全部由数字组成，将字符串转化为数字，再相减")]),t._v(" "),a("li",[t._v("字符串不能转化为数字，结束是 NaN")]),t._v(" "),a("li",[t._v("null转化为0  undefined转化为NaN  true为1 false为0")])])]),t._v(" "),a("li",[t._v("字符串和字符串相减 :  和数字和字符串相减规则相同")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11a'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//10")]),t._v("\n")])])]),a("h4",{attrs:{id:"加减法做数字与字符串的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加减法做数字与字符串的转换"}},[t._v("#")]),t._v(" 加减法做数字与字符串的转换")]),t._v(" "),a("ul",[a("li",[t._v("数字转化为字符串: "),a("code",[t._v('num + ""')])]),t._v(" "),a("li",[t._v("字符串转化为数字: "),a("code",[t._v("num - 0")])])]),t._v(" "),a("h3",{attrs:{id:"乘法运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乘法运算"}},[t._v("#")]),t._v(" 乘法运算")]),t._v(" "),a("ol",[a("li",[t._v("数字与字符串运算：\n"),a("ul",[a("li",[t._v("将字符串尝试着转化为数字，进行运算")]),t._v(" "),a("li",[t._v("字符串不能转化为数字，结果是 NaN")])])]),t._v(" "),a("li",[t._v("null转化为0  true为1 false为0    空字符串转为0")]),t._v(" "),a("li",[t._v("Undefined乘所有数据类型的都为NaN")]),t._v(" "),a("li",[t._v("字符串和字符串运算 :  和数字和字符串运算规则相同")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 121")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1a'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n")])])]),a("h3",{attrs:{id:"除法运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#除法运算"}},[t._v("#")]),t._v(" 除法运算")]),t._v(" "),a("ol",[a("li",[t._v("字符串类型 数字类型与 null 相除 结果为 Infinity")]),t._v(" "),a("li",[t._v("字符串类型、数字类型 null与 Undefined 相除 结果为 NaN")]),t._v(" "),a("li",[t._v("字符串类型 数字类型 null与 字符串类型、数字类型 null相除进行相应转换做除法运算\n"),a("ul",[a("li",[t._v("字符串不能转为数字则结果为NaN")]),t._v(" "),a("li",[t._v("空字符串转为0")])])])]),t._v(" "),a("div",{staticClass:"language-JS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Infinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11a'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("h3",{attrs:{id:"取余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取余"}},[t._v("#")]),t._v(" 取余(%)")]),t._v(" "),a("p",[t._v("取余，即取余数，如 "),a("code",[t._v("10 % 3")]),t._v(" 则指 10除以3的余数")]),t._v(" "),a("blockquote",[a("p",[t._v("用于取一段范围的值 "),a("br"),t._v(" 一般不用于小数，因为结果不确定（不精确）。")])]),t._v(" "),a("ol",[a("li",[t._v("Undefined 与所有数据类型的 取余 都为NaN")]),t._v(" "),a("li",[t._v("其余数据类型先进行转换，能转为数字则进行取余运算，否则为NaN")])]),t._v(" "),a("div",{staticClass:"language-JS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("p",[t._v("判断数字num是否是偶数：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是偶数"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"自加-自减"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自加-自减"}},[t._v("#")]),t._v(" ++ 自加 -- 自减")]),t._v(" "),a("blockquote",[a("p",[t._v("规则： i++  相当于变量i自身值变大1，类似i+=1； i--同理\n"),a("code",[t._v("++")]),t._v("可写在变量前或后： "),a("code",[t._v("i++")]),t._v("是先访问i然后再自增，而"),a("code",[t._v("++i")]),t._v("则是先自增然后再访问i的值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10   先输出，后自增。 console.log(i);  i++;")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11   先自增，后输出。 i++;  console.log(i);")]),t._v("\n")])])]),a("h3",{attrs:{id:"求幂运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求幂运算符"}},[t._v("#")]),t._v(" 求幂运算符")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("x**y")]),t._v(" 取x的y次方，同"),a("code",[t._v("Math.pow(x, y)")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//9")]),t._v("\n效果同\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//9")]),t._v("\n")])])]),a("h2",{attrs:{id:"关系-比较-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系-比较-运算符"}},[t._v("#")]),t._v(" 关系(比较)运算符")]),t._v(" "),a("p",[t._v("比较运算符得到的结果 都是 boolean")]),t._v(" "),a("p",[t._v("主要有以下几种比较运算符")]),t._v(" "),a("ul",[a("li",[t._v(">")]),t._v(" "),a("li",[t._v("<")]),t._v(" "),a("li",[t._v(">=")]),t._v(" "),a("li",[t._v("<=")]),t._v(" "),a("li",[t._v("== (相等)")]),t._v(" "),a("li",[t._v("!= (不相等)")]),t._v(" "),a("li",[t._v("=== (全等)")]),t._v(" "),a("li",[t._v("!== (不全等)")])]),t._v(" "),a("h3",{attrs:{id:"比较规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较规则"}},[t._v("#")]),t._v(" 比较规则")]),t._v(" "),a("ol",[a("li",[t._v("将比较的对象尝试转化为数字,能转化则按照数字比较,不能转化则为false")]),t._v(" "),a("li",[a("code",[t._v("NaN")]),t._v("与任意数据比较结果均为 false")]),t._v(" "),a("li",[t._v("字符串和字符串比较, 比较第一个字符的unicode编码值，第一个字符要是相同，就比较第二个，依次往下(ASCII码表在最末尾)"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10000'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1的unicode值比2的unicode值小  true       ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10000'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转成数字比较  true")]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v("==")]),t._v("和全等"),a("code",[t._v("===")]),t._v("的区别\n"),a("ul",[a("li",[a("code",[t._v("==")]),t._v("是只比较两边的值(如果两边类型不相同，则先尝试着转化，然后再比较，所以耗时比"),a("code",[t._v("===")]),t._v("多)\n"),a("ul",[a("li",[t._v("0==undefined (false)")]),t._v(" "),a("li",[t._v("0==null (false)")]),t._v(" "),a("li",[t._v("NaN == NaN (false)")]),t._v(" "),a("li",[t._v("undefined==null (true)")])])]),t._v(" "),a("li",[a("code",[t._v("===")]),t._v("比较两边的值和类型，都相等才返回true；")])])]),t._v(" "),a("li",[a("code",[t._v("===")]),t._v(" 和 "),a("code",[t._v("object.js()")]),t._v("的区别")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("h2",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("=、+=、-=、*=、/=、%=、**=")]),t._v("   运算符右边的值赋给左边的变量")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("实例")]),t._v(" "),a("th",[t._v("等价于")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("=")])]),t._v(" "),a("td",[t._v("a=25")]),t._v(" "),a("td",[t._v("a=25")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("+=")])]),t._v(" "),a("td",[t._v("a+=25")]),t._v(" "),a("td",[t._v("a=a+25")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-=")])]),t._v(" "),a("td",[t._v("a-=25")]),t._v(" "),a("td",[t._v("a=a-25")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*=")])]),t._v(" "),a("td",[t._v("a*=25")]),t._v(" "),a("td",[t._v("a=a*25")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/=")])]),t._v(" "),a("td",[t._v("a/=25")]),t._v(" "),a("td",[t._v("a=a/25")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%=")])]),t._v(" "),a("td",[t._v("a%=25")]),t._v(" "),a("td",[t._v("a=a%25")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("**=")])]),t._v(" "),a("td",[t._v("a**=3")]),t._v(" "),a("td",[t._v("a=a^3")])])])]),t._v(" "),a("h2",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("blockquote",[a("p",[t._v('在JavaScript逻辑运算中，0、""、null、false、undefined、NaN都会判为false，其他都为true')])]),t._v(" "),a("ol",[a("li",[t._v("与 "),a("code",[t._v("&&")]),t._v(" "),a("ul",[a("li",[t._v("只要有一个是假，结果就是假")]),t._v(" "),a("li",[t._v("&&左侧是真，结果取右侧； 左侧假，结果取左侧值")])])]),t._v(" "),a("li",[t._v("或 "),a("code",[t._v("||")]),t._v(" "),a("ul",[a("li",[t._v("只要有一个是真，结果就是真")]),t._v(" "),a("li",[t._v("||左侧是真，结果取左侧； 左侧假，结果取右侧值")])])]),t._v(" "),a("li",[t._v("非 "),a("code",[t._v("!")]),t._v(" "),a("ul",[a("li",[t._v("取反")]),t._v(" "),a("li",[t._v("结果是"),a("code",[t._v("boolean")]),t._v("值")])])])]),t._v(" "),a("p",[t._v("总结： 与或运算，哪一侧能决定表达式真假性，则结果取哪一侧。")]),t._v(" "),a("p",[t._v("例:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0     ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h4",{attrs:{id:"逻辑运算符的应用-短路原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符的应用-短路原则"}},[t._v("#")]),t._v(" 逻辑运算符的应用：短路原则")]),t._v(" "),a("blockquote",[a("p",[t._v("与或运算左侧结果已经确定整个表达式真假性，则右侧不再计算")])]),t._v(" "),a("ul",[a("li",[t._v("&&与运算：左侧是假，右侧不进行计算")]),t._v(" "),a("li",[t._v("||或运算：左侧是真，右侧不进行计算")])]),t._v(" "),a("h2",{attrs:{id:"一元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元运算符"}},[t._v("#")]),t._v(" 一元运算符")]),t._v(" "),a("p",[t._v("只能操作一个值的操作符就叫做一元操作符")]),t._v(" "),a("ul",[a("li",[t._v("new (创建对象) delete (删除对象上的内容)")]),t._v(" "),a("li",[t._v("typeof -(负号) +(正号)")]),t._v(" "),a("li",[t._v("instanceof (判断对象是否由一个构造函数实例化)")])]),t._v(" "),a("h2",{attrs:{id:"三元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符"}},[t._v("#")]),t._v(" 三元运算符")]),t._v(" "),a("blockquote",[a("p",[t._v("基于某些条件对变量进行赋值的条件运算符，")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" iablename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("value1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("value2   \n")])])]),a("p",[t._v("condition为true则variablename取:前的值，也就是value1，否则取:后的值，也就是value2")]),t._v(" "),a("h3",{attrs:{id:"三元运算符使用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符使用技巧"}},[t._v("#")]),t._v(" 三元运算符使用技巧")]),t._v(" "),a("ol",[a("li",[t._v("可以简化条件判断")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMember"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fee"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"￥2.00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fee"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"￥10.00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfee"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("isMember "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"￥2.00"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"￥10.00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("三元运算符用来执行多个操作,用小括号包裹，再用逗号隔开语句。")])]),t._v(" "),a("h2",{attrs:{id:"特殊运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊运算符"}},[t._v("#")]),t._v(" 特殊运算符")]),t._v(" "),a("ul",[a("li",[t._v(", 逗号 —— 分隔数据")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("() 小括号运算符 —— 提升算术优先级")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),a("h2",{attrs:{id:"指数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指数运算符"}},[t._v("#")]),t._v(" 指数运算符  "),a("Badge",{attrs:{text:"ES2016 ",type:"warning"}})],1),t._v(" "),a("blockquote",[a("p",[t._v("ES2016 新增了一个指数运算符（**）。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n")])])]),a("p",[t._v("这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于 2 ** (3 ** 2)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n")])])]),a("p",[t._v("上面代码中，首先计算的是第二个指数运算符，而不是第一个。")]),t._v(" "),a("p",[t._v("指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 a = a * a;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 b = b * b * b;")]),t._v("\n")])])]),a("h2",{attrs:{id:"链判断运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链判断运算符"}},[t._v("#")]),t._v(" 链判断运算符 "),a("code",[t._v("?.")]),t._v(" "),a("Badge",{attrs:{text:"ES2020 ",type:"warning"}})],1),t._v(" "),a("p",[t._v("编程实务中，如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。比如，读取message.body.user.firstName这个属性，安全的写法是写成下面这样。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("  firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("简化的写法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fooValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myForm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'input[name=foo]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("value\n")])])]),a("p",[a("code",[t._v("?.")]),t._v("运算符，直接在链式调用的时候判断，左侧的对象是否为"),a("code",[t._v("null")]),t._v("或"),a("code",[t._v("undefined")]),t._v("。如果是的，就不再往下运算，而是返回"),a("code",[t._v("undefined")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面是判断对象方法是否存在，如果存在就立即执行的例子。")]),t._v("\niterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"null-判断运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-判断运算符"}},[t._v("#")]),t._v(" Null 判断运算符 "),a("code",[t._v("??")]),a("Badge",{attrs:{text:"ES2020 ",type:"warning"}})],1),t._v(" "),a("p",[t._v("读取对象属性的时候，如果某个属性的值是null或undefined，有时候需要为它们指定默认值。常见做法是通过||运算符指定默认值。")]),t._v(" "),a("p",[t._v("只要属性的值为"),a("code",[t._v("null")]),t._v("或"),a("code",[t._v("undefined")]),t._v("，默认值就会生效，但是属性的值如果为空字符串或"),a("code",[t._v("false")]),t._v("或0，默认值也会生效")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" headerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, world!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animationDuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("animationDuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" showSplashScreen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("showSplashScreen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Null 判断运算符"),a("code",[t._v("??")]),t._v("。它的行为类似||，但是只有运算符左侧的值为null或undefined时，才会返回右侧的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" headerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, world!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animationDuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("animationDuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" showSplashScreen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("showSplashScreen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("跟链判断运算符"),a("code",[t._v("?.")]),t._v("配合使用，为"),a("code",[t._v("null")]),t._v("或"),a("code",[t._v("undefined")]),t._v("的值设置默认值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animationDuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("animationDuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\nlhs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" middle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" rhs\nlhs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" middle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" rhs\nlhs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" middle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" rhs\nlhs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" middle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" rhs\n")])])]),a("h2",{attrs:{id:"逻辑赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑赋值运算符"}},[t._v("#")]),t._v(" 逻辑赋值运算符 "),a("Badge",{attrs:{text:"ES2021",type:"warning"}})],1),t._v(" "),a("blockquote",[a("p",[t._v("ES2021 引入了三个新的逻辑赋值运算符（logical assignment operators），将逻辑运算符与赋值运算符进行结合。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或赋值运算符")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||=")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与赋值运算符")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&=")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Null 赋值运算符")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这三个运算符||=、&&=、??=相当于先进行逻辑运算，然后根据运算结果，再视情况进行赋值运算。")]),t._v("\n")])])]),a("p",[t._v("它们的一个用途是，为变量或属性设置默认值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的写法")]),t._v("\nuser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的写法")]),t._v("\nuser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("opts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("opts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"运算符的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符的优先级"}},[t._v("#")]),t._v(" 运算符的优先级")]),t._v(" "),a("blockquote",[a("p",[t._v("下表中的运算符按从最高到最低的优先级列出。具有相同优先级的运算符按从左至右的顺序求值。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("运算符类型")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("(…)")])]),t._v(" "),a("td",[t._v("圆括号")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("….…")]),t._v(", "),a("code",[t._v("…[…]")]),t._v(" ,"),a("code",[t._v("new…(…)")]),t._v(","),a("code",[t._v("…(…)")])]),t._v(" "),a("td",[t._v("成员访问,需计算的成员访问,new(带参数列表),函数调用")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("new …")])]),t._v(" "),a("td",[t._v("new(无参数列表)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("…++")]),t._v(", "),a("code",[t._v("…--")])]),t._v(" "),a("td",[t._v("后置递增(运算符在后) 后置递减(运算符在后)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!…")]),t._v(","),a("code",[t._v("~…")]),t._v(","),a("code",[t._v("+…")]),t._v(","),a("code",[t._v("-…")]),t._v(","),a("code",[t._v("++…")]),t._v(","),a("code",[t._v("--…")]),t._v(","),a("code",[t._v("typeof…")]),t._v(","),a("code",[t._v("void…")]),t._v(","),a("code",[t._v("delete…")]),t._v(","),a("code",[t._v("await…")])]),t._v(" "),a("td",[t._v("逻辑非 按位非 一元加法 一元减法 前置递增 前置递减 typeof void delete await")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("…**…")])]),t._v(" "),a("td",[t._v("幂")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("…*…")]),t._v(" "),a("code",[t._v("…/…")]),t._v(" "),a("code",[t._v("…%…")])]),t._v(" "),a("td",[t._v("乘法 除法 取余")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("+")]),t._v(" "),a("code",[t._v("-")])]),t._v(" "),a("td",[t._v("加法  减法")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<")]),t._v(" "),a("code",[t._v("<=")]),t._v(" "),a("code",[t._v(">")]),t._v(" "),a("code",[t._v(">=")]),t._v(" "),a("code",[t._v("in")]),t._v(" "),a("code",[t._v("instanceof")])]),t._v(" "),a("td",[t._v("小于 小于等于 大于 大于等于 in 判断是否为这个构造函数实例化")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("==")]),t._v(" "),a("code",[t._v("!=")]),t._v(" "),a("code",[t._v("===")]),t._v(" "),a("code",[t._v("!==")])]),t._v(" "),a("td",[t._v("等号 非等 全等 非全等")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("&&")])]),t._v(" "),a("td",[t._v("逻辑与")])]),t._v(" "),a("tr",[a("td",[t._v("¦¦")]),t._v(" "),a("td",[t._v("逻辑或")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("… ? … : …")])]),t._v(" "),a("td",[t._v("三元运算符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("=")]),t._v(" "),a("code",[t._v("+=")]),t._v(" "),a("code",[t._v("-=")]),t._v(" "),a("code",[t._v("*=")]),t._v(" "),a("code",[t._v("/=")]),t._v(" "),a("code",[t._v("%=")]),t._v(" "),a("code",[t._v("**=")])]),t._v(" "),a("td",[t._v("赋值")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(",")])]),t._v(" "),a("td",[t._v("逗号")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/javascript/ASCII.jpg",alt:"ASCII码表"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);