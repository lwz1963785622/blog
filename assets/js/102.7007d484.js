(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{487:function(t,s,a){"use strict";a.r(s);var e=a(17),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"lifecycle-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lifecycle-methods"}},[t._v("#")]),t._v(" Lifecycle Methods")]),t._v(" "),a("blockquote",[a("p",[t._v("V16.3版本的react对组件的生命周期函数进行了一些修改"),a("br"),t._v("\n对于任何一个框架，或者组件而言，都有其生命周期的定义，比如从定义到销毁，会有一定的流程在其中控制。")])]),t._v(" "),a("p",[t._v("生命周期就是指一个对象的生老病死。 生命周期（Life Cycle）的概念应用在各行各业中。广义上来说泛指自然界和人类社会各种客观事物的阶段性变化及其规律。自然界的生命周期，可以划分为出生、生长、成熟、衰老、死亡。不同体系中的生命周期都是从上述规律中演变而来，运用到了软件开发这个行业中。")]),t._v(" "),a("p",[t._v("React组件的生命周期分为三个阶段：初始化、运行中和销毁这三个阶段。开始使用组件初始化，组件需要更新 运行中，组件不需要用销毁。React在每个生命周期阶段都给我们提供了对应的钩子函数，以此来完成一些更高级的组件。")]),t._v(" "),a("h2",{attrs:{id:"组件生命周期-v16-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件生命周期-v16-4"}},[t._v("#")]),t._v(" 组件生命周期(V16.4)")]),t._v(" "),a("blockquote",[a("p",[t._v("参考： "),a("a",{attrs:{href:"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"\\__blank"}},[t._v("http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/")])])]),t._v(" "),a("h2",{attrs:{id:"初始化阶段执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段执行"}},[t._v("#")]),t._v(" 初始化阶段执行")]),t._v(" "),a("p",[t._v("当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("重要性")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("static defaultProps")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%86%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("获取默认属性，只调用一次(创建类的时候有且调用一次)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("constructor")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("react组件的构造函数在挂载之前被调用。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("static getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%86%E2%98%86%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在组件实例化后，接受新的props后，状态修改后会被调用。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("render()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%85",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("** 唯一必须添加的方法 ** ,被调用时，组件在render函数生成虚拟节点，最后由react将虚拟节点变成真正的节点渲染到页面上")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("componentDidMount()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%85",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("组件被装载后才会被调用")])])])]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),a("p",[t._v("如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。")]),t._v(" "),a("p",[t._v("在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 super(props)。否则，this.props 在构造函数中可能会出现未定义的 bug。")]),t._v(" "),a("p",[t._v("通常，在 React 中，构造函数仅用于以下两种情况：")]),t._v(" "),a("ul",[a("li",[t._v("通过给 this.state 赋值对象来初始化内部 state。")]),t._v(" "),a("li",[t._v("为事件处理函数绑定实例")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化内部 state")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为事件处理函数绑定实例 修复事件处理程序this指向")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleChange "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleChange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("注意：\n在 "),a("code",[t._v("constructor()")]),t._v(" 函数中不要调用 "),a("code",[t._v("setState()")]),t._v(" 方法。如果你的组件需要使用内部 state，请直接在构造函数中为 this.state 赋值初始 state：")])]),t._v(" "),a("h3",{attrs:{id:"static-getderivedstatefromprops-nextprops-prevstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-getderivedstatefromprops-nextprops-prevstate"}},[t._v("#")]),t._v(" static getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),a("p",[t._v("这个方法将会在组件实例化和接收到新的 props 的时候被调用。可以看出，当组件实例化的时候，这个方法替代了componentWillMount()，而当接收到新的 props 时，该方法替代了 componentWillReceiveProps() 和 componentWillUpdate()。")]),t._v(" "),a("blockquote",[a("p",[t._v("注意: 这个方法是个 static 的方法，因此使用 this 在这个方法中并不指代本组件，如果打印出来会发现这个this是null。\n而且这个方法有返回值。当需要更新状态时，需要返回一个state object(没有新增该状态，有更改指定状态)，如果不需要任何更新，则返回null即可。")])]),t._v(" "),a("h3",{attrs:{id:"render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" render()")]),t._v(" "),a("p",[t._v("render() 方法是 class 组件中唯一必须实现的方法。当 render 被调用时，它会检查 this.props 和 this.state 的变化并返回以下类型之一：")]),t._v(" "),a("ul",[a("li",[t._v("React 元素。通常通过 JSX 创建。例如，"),a("code",[t._v("<div />")]),t._v(" 会被 React 渲染为 DOM 节点，"),a("code",[t._v("<MyComponent />")]),t._v(" 会被 React 渲染为自定义组件，无论是 "),a("code",[t._v("<div />")]),t._v(" 还是 "),a("code",[t._v("<MyComponent />")]),t._v(" 均为 React 元素。")]),t._v(" "),a("li",[t._v("数组或 fragments。 使得 render 方法可以返回多个元素。欲了解更多详细信息，请参阅 fragments 文档。")]),t._v(" "),a("li",[t._v("Portals。可以渲染子节点到不同的 DOM 子树中。欲了解更多详细信息，请参阅有关 portals 的文档")]),t._v(" "),a("li",[t._v("字符串或数值类型。它们在 DOM 中会被渲染为文本节点")]),t._v(" "),a("li",[t._v("布尔类型或 null。什么都不渲染。（主要用于支持返回 test && "),a("Child"),t._v(" 的模式，其中 test 为布尔类型。)")],1)]),t._v(" "),a("p",[a("code",[t._v("render()")]),t._v(" 函数应该为纯函数，这意味着在不修改组件 state 的情况下，每次调用时都返回相同的结果，并且它不会直接与浏览器交互。")]),t._v(" "),a("h3",{attrs:{id:"componentdidmount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidmount"}},[t._v("#")]),t._v(" componentDidMount()")]),t._v(" "),a("p",[a("code",[t._v("componentDidMount()")]),t._v(" 会在组件挂载后（插入 DOM 树中）立即调用。依赖于 DOM 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。")]),t._v(" "),a("p",[t._v("由于这个方法发生在render()之后，因此在这个方法中调用setState()会导致一次额外的渲染，只不过这次渲染会发生在浏览器更新屏幕之前。因此即使渲染了两次，用户也不会看到中间状态，即不会有那种状态突然跳一下的情况发生。对于像modals和tooltips这种需要在渲染前知道尺寸大小、位置的情况来说，也是很有用。只不过，虽然在用户视觉体验上可能没有影响，但是这种操作可能会导致性能方面的问题，因此还需慎用。")]),t._v(" "),a("h2",{attrs:{id:"运行中阶段执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行中阶段执行"}},[t._v("#")]),t._v(" 运行中阶段执行")]),t._v(" "),a("p",[t._v("当组件的 props 或 state 发生变化时会触发组件的更新，组件重新渲染的过程中生命周期调用顺序如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("重要性")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("static getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%86%E2%98%86%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在组件实例化后，接受新的props后，状态修改后会被调用。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("shouldComponentUpdate()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%86%E2%98%86%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个布尔值。在组件接收到新的props或者state时被调用。 可以在你确认不需要更新组件时使用。(nextProps,nextState)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("render()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%85",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("** 唯一必须添加的方法 ** ，组件在render函数生成虚拟节点，最后由react将虚拟节点变成真正的节点渲染到页面上")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getSnapshotBeforeUpdate(prevProps, prevState)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%86%E2%98%86%E2%98%86%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在更新之前被调用(不常用)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("componentDidUpdate()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%86%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("真正的DOM被渲染之后调用")])])])]),t._v(" "),a("h3",{attrs:{id:"shouldcomponentupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate"}},[t._v("#")]),t._v(" shouldComponentUpdate")]),t._v(" "),a("p",[t._v("根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。")]),t._v(" "),a("p",[t._v("当 props 或 state 发生变化时，shouldComponentUpdate() 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 forceUpdate() 时不会调用该方法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//other code")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"componentdidupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate"}},[t._v("#")]),t._v(" componentDidUpdate")]),t._v(" "),a("p",[t._v("当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 典型用法（不要忘记比较 props）：")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" prevProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"卸载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载阶段"}},[t._v("#")]),t._v(" 卸载阶段")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("重要性")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("componentWillUnmount")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:"https://badgen.net/badge/stars/%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%86",alt:"stars"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("这个函数在销毁操作真正执行之前调用，给开发者最后的机会进行一些清理工作")])])])]),t._v(" "),a("p",[a("code",[t._v("componentWillUnmount()")]),t._v(" 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 "),a("code",[t._v("componentDidMount()")]),t._v(" 中创建的订阅等。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUnmount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//组件将要卸载的调用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在componentWillUnmount方法中，我们通常会执行一些清理操作，例如：移除事件处理程序或者清除定时器。")]),t._v(" "),a("h2",{attrs:{id:"生命周期功能替换一览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期功能替换一览"}},[t._v("#")]),t._v(" 生命周期功能替换一览")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    初始化属性\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" defaultProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 初始化状态\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 修改事件处理程序 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("指向\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDerivedStateFromProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 基于属性更新状态\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 属性变化时获取外部数据\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("操作\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 从服务器获取数据\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        决定组件是否更新\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ture"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSnapshotBeforeUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        在更新之前读取"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("属性\n        类似于快照 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'snapshot'")]),t._v(" 为传递给componentDidUpdate 的 snapshot 参数\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" snapshot\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" snapshot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        snapshot 为上一个生命周期 getSnapshotBeforeUpdate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 的参数\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUnmount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 做一些清理工作，如事件绑定、定时器\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);