(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{416:function(t,a,s){"use strict";s.r(a);var e=s(17),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("h2",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),s("blockquote",[s("p",[t._v('详见上一节 "内置顶层函数"')])]),t._v(" "),s("ul",[s("li",[t._v("Number()      转换成数值类型")]),t._v(" "),s("li",[t._v("String()      转换成字符串类型")]),t._v(" "),s("li",[t._v("Boolean()     转换成布尔类型")]),t._v(" "),s("li",[t._v("parseInt()    将字符串转换为整型")]),t._v(" "),s("li",[t._v("parseFloat()  转换为浮点型")])]),t._v(" "),s("h2",{attrs:{id:"隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[t._v("#")]),t._v(" 隐式类型转换")]),t._v(" "),s("blockquote",[s("p",[t._v("由于js是弱类型语言，在使用算术运算符时，运算符两边的数据类型可以是任意的。比如，一个字符串可以和数字相加。之所以不同的数据类型之间可以做运算，是因为JavaScript引擎在运算之前会悄悄的把他们进行了"),s("code",[t._v("隐式类型转换")])])]),t._v(" "),s("h3",{attrs:{id:"算数运算符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算数运算符类"}},[t._v("#")]),t._v(" 算数运算符类")]),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" - * / %")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("* 在进行算术运算，如果操作数不是数值，将会隐式的调用Number()函数，按照这个函数的转换规则进行转换\n* 如果转换不成功，整个表达式返回NaN\n")])])]),s("h4",{attrs:{id:"-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")]),t._v(" +")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("*  任何数据类型和`字符串`相加，返回他们拼接的结果。\n*  如果操作数不包含字符串，则规则同 `- * / %`\n")])])]),s("h3",{attrs:{id:"关系运算符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符类"}},[t._v("#")]),t._v(" 关系运算符类")]),t._v(" "),s("ul",[s("li",[t._v("两个操作数都是"),s("code",[t._v("字符串")]),t._v("，则比较两个字符串对应的字符编码")]),t._v(" "),s("li",[t._v("除此之外，参与比较的数据都会隐式调用"),s("code",[t._v("Number()")]),t._v("进行转换后再比较")])]),t._v(" "),s("h3",{attrs:{id:"逻辑运算符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符类"}},[t._v("#")]),t._v(" 逻辑运算符类")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("&& || !")]),t._v("运算，会调用 "),s("code",[t._v("Boolean()")]),t._v("函数判断参与逻辑运算的数据的真假性")])]),t._v(" "),s("h3",{attrs:{id:"语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[t._v("#")]),t._v(" 语句")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("if")]),t._v("、"),s("code",[t._v("while")]),t._v("、"),s("code",[t._v("do while")]),t._v("语句和"),s("code",[t._v("三元表达式")]),t._v("里面的判断条件表达式会隐式的调用"),s("code",[t._v("Boolean()")]),t._v("函数，按照这个函数的转换规则，转换为相应的布尔值")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断一个字符串是否为空")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str is true"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);